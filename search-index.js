var searchIndex = new Map(JSON.parse('[\
["notifier",{"doc":"<em>A simple API to send messages to your Dashboard</em>","t":"CCHCCHHHHHHFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNHH","n":["get","helpers","main","message","post","rocket","channel","general","health","retrieve_message","store_message","Message","attr","bg","black","blink","blue","bold","borrow","borrow_mut","bright","bright_black","bright_blue","bright_cyan","bright_green","bright_magenta","bright_red","bright_white","bright_yellow","clear","conceal","cyan","deserialize","dim","fg","fixed","from","green","into","into_collection","invert","italic","linger","magenta","mapped","mask","message","new","on_black","on_blue","on_bright","on_bright_black","on_bright_blue","on_bright_cyan","on_bright_green","on_bright_magenta","on_bright_red","on_bright_white","on_bright_yellow","on_cyan","on_fixed","on_green","on_magenta","on_primary","on_red","on_rgb","on_white","on_yellow","primary","quirk","rapid_blink","red","rgb","serialize","strike","style","title","try_from","try_into","type_id","underline","whenever","white","wrap","yellow","channel","general"],"q":[[0,"notifier"],[6,"notifier::get"],[9,"notifier::helpers"],[11,"notifier::message"],[85,"notifier::post"],[87,"rocket::phase"],[88,"rocket::rocket"],[89,"alloc::string"],[90,"rocket::serde::json"],[91,"rocket_http::status"],[92,"core::result"],[93,"yansi::attr_quirk"],[94,"yansi::paint"],[95,"yansi::color"],[96,"serde::de"],[97,"smallvec"],[98,"smallvec"],[99,"yansi::attr_quirk"],[100,"core::any"],[101,"yansi::condition"]],"d":["This module contains the GET routes for the API.","This module contains the helper functions for the API.","","This module contains the struct <code>Message</code>.","This module contains the POST routes for the API.","This function starts the application and mounts the routes.","This route is for any specified channel.","This route is for the general channel.","This route is for the health check.","This function retrieves a message from a file.","This function stores a message in a file.","This struct is used to store the message data.","Enables the styling <code>Attribute</code> <code>value</code>.","Returns a styled value derived from <code>self</code> with the …","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Blink</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Bold</code>.","","","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Bright</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Clear</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Conceal</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Cyan</code>.","","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Dim</code>.","Returns a styled value derived from <code>self</code> with the …","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Fixed</code>.","Returns the argument unchanged.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Green</code>.","Calls <code>U::from(self)</code>.","","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Invert</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Italic</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Linger</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Magenta</code>.","","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Mask</code>.","The message.","This function creates a new <code>Message</code> struct.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Black</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Blue</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::OnBright</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlack</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightBlue</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightCyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightGreen</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightMagenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightRed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightWhite</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::BrightYellow</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Cyan</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Fixed</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Green</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Magenta</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Primary</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Rgb</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>bg()</code> set to <code>Color::Yellow</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Primary</code>.","Enables the <code>yansi</code> <code>Quirk</code> <code>value</code>.","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::RapidBlink</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Red</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Rgb</code>.","","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Strike</code>.","The style of the message. Can be <code>info</code>, <code>success</code>, <code>warning</code> or …","The title of the message.","","","","Returns <code>self</code> with the <code>attr()</code> set to <code>Attribute::Underline</code>.","Conditionally enable styling based on whether the <code>Condition</code>…","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::White</code>.","Returns <code>self</code> with the <code>quirk()</code> set to <code>Quirk::Wrap</code>.","Returns <code>self</code> with the <code>fg()</code> set to <code>Color::Yellow</code>.","This route is for any specified channel.","This route is for the general channel."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0],"f":[0,0,[[],1],0,0,[[],[[3,[2]]]],[4,[[8,[[6,[5]],7]]]],[[],[[8,[[6,[5]],7]]]],[[],[[6,[5]]]],[9,[[8,[[6,[5]],7]]]],[[9,5],7],0,[[-1,10],[[11,[-2]]],[],[]],[[-1,12],[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[8,[5]]],13],[-1,[[11,[-2]]],[],[]],[[-1,12],[[11,[-2]]],[],[]],[[-1,14],[[11,[-2]]],[],[]],[-1,-1,[]],[-1,[[11,[-2]]],[],[]],[-1,-2,[],[]],[-1,[[15,[-3]]],[],[],[[17,[],[[16,[-2]]]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[-1,-4],[[15,[-5]]],[],[],[],[[19,[-2],[[18,[-3]]]]],[[17,[],[[16,[-3]]]]]],[-1,[[11,[-2]]],[],[]],0,[[4,4,4],[[6,[5]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[-1,14],[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[-1,14,14,14],[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[-1,20],[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[-1,14,14,14],[[11,[-2]]],[],[]],[[5,-1],8,21],[-1,[[11,[-2]]],[],[]],0,0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,22,[]],[-1,[[11,[-2]]],[],[]],[[-1,23],[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[4,[6,[5]]],7],[[[6,[5]]],7]],"c":[],"p":[[1,"tuple"],[6,"Build",87],[5,"Rocket",88],[5,"String",89],[5,"Message",11],[5,"Json",90],[5,"Status",91],[6,"Result",92],[1,"str"],[6,"Attribute",93],[5,"Painted",94],[6,"Color",95],[10,"Deserializer",96],[1,"u8"],[5,"SmallVec",97],[17,"Item"],[10,"Array",97],[17,"Output"],[10,"FnMut",98],[6,"Quirk",93],[10,"Serializer",99],[5,"TypeId",100],[5,"Condition",101]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
